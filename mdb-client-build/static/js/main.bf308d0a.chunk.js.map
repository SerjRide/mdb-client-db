{"version":3,"sources":["nav/index.js","nav/nav.js","services/filltext-service.js","spinner/index.js","spinner/spinner.js","error-indicator/index.js","error-indicator/error-indicator.js","datatable-page/index.js","datatable-page/datatable-page.js","App.js","registerServiceWorker.js","index.js"],"names":["Nav","_this$props","this","props","onChangedLight","onChangedHard","react_default","a","createElement","BrowserRouter","mdbreact_esm","onClick","to","Component","FilltextService","__apiBase","_transformList","list","id","firstName","lastName","email","phone","street","address","streetAddress","city","state","zip","description","url","fetch","concat","res","ok","Error","json","getResource","map","Spinner","className","ErrorIndicator","color","DatatablePage","filltextService","loading","error","onError","err","_this","setState","loadLiteTable","prevProps","table","loadHardTable","_this2","getLiteData","then","catch","_this3","getHardData","arr","_ref","rows","_this$state","src_spinner","src_error_indicator","renderList","columns","label","field","sort","width","i","length","push","renderTab","striped","responsive","small","data","App","src_nav","center","style","height","sm","src_datatable_page","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.bf308d0a.chunk.js","sourcesContent":["import Nav from './nav';\r\n\r\nexport default Nav;\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { MDBNav, MDBNavLink } from \"mdbreact\";\r\nimport './nav.css';\r\n\r\nexport default class Nav extends Component {\r\n\r\n  render() {\r\n\r\n    const { onChangedLight, onChangedHard } = this.props\r\n\r\n    return (\r\n\r\n      <BrowserRouter>\r\n        <MDBNav>\r\n        <h1>MDB Client DB</h1>\r\n          <MDBNavLink\r\n            onClick={ onChangedLight } to=\"#!\">\r\n            Light Table\r\n          </MDBNavLink>\r\n          <MDBNavLink\r\n            onClick={ onChangedHard }\r\n            to=\"#!\">\r\n            Hard Table\r\n          </MDBNavLink>\r\n        </MDBNav>\r\n    </BrowserRouter>\r\n\r\n    );\r\n  };\r\n};\r\n","export default class FilltextService {\n\n  __apiBase = 'http://www.filltext.com/'\n\n  async getResource (url) {\n    const res = await fetch(`${this.__apiBase}${url}`);\n    if(!res.ok) throw new Error(`Could not fetch ${url}`)\n    return await res.json();\n  }\n\n  async getLiteData() {\n    const res = await this.getResource(`?rows=61&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D`);\n    return res.map(this._transformList);\n  };\n\n  async getHardData() {\n    const res = await this.getResource(`?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D`);\n    return res.map(this._transformList);\n  };\n\n  _transformList = (list) => {\n    return {\n      id: list.id,\n      firstName: list.firstName,\n      lastName: list.lastName,\n      email: list.email,\n      phone: list.phone,\n      street: list.address.streetAddress,\n      city: list.address.city,\n      state: list.address.state,\n      zip: list.address.zip,\n      description: list.description\n    };\n  };\n\n};\n","import Spinner from './spinner';\n\nexport default Spinner;\n","import React, { Component } from 'react';\nimport './spinner.css';\n\nexport default class Spinner extends Component {\n\n  render() {\n    return (\n      <div className=\"lds-css\">\n        <div className=\"lds-double-ring\">\n          <div></div><div></div>\n        </div>\n      </div>\n    );\n  }\n};\n","import ErrorIndicator from './error-indicator';\r\n\r\nexport default ErrorIndicator;\r\n","import React from 'react';\r\nimport { MDBContainer, MDBAlert } from 'mdbreact';\r\n\r\nconst ErrorIndicator = () => {\r\n  return (\r\n    <MDBContainer>\r\n      <MDBAlert color=\"danger\" >\r\n      <h4>ERROR: 404</h4>\r\n        Something has gone terribly wrong<br/>\r\n        Страница не найдена или сервер времено недоступен\r\n      </MDBAlert>\r\n    </MDBContainer>\r\n  );\r\n}\r\n\r\nexport default ErrorIndicator;\r\n","import DatatablePage from './datatable-page';\r\n\r\nexport default DatatablePage;\r\n","import React, { Component } from 'react';\r\nimport { MDBDataTable } from 'mdbreact';\r\nimport FilltextService from '../services/filltext-service';\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from '../error-indicator';\r\nimport './datatable-page.css';\r\n\r\nexport default class DatatablePage extends Component {\r\n\r\n  filltextService = new FilltextService();\r\n\r\n  state = {\r\n    list: null,\r\n    loading: true,\r\n    error: false,\r\n  };\r\n\r\n  onError = (err) => {\r\n    this.setState({\r\n      error: true,\r\n      loading: false\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadLiteTable();\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { table } = this.props;\r\n\r\n    if (this.props.table !== prevProps.table) {\r\n      if (table === 'light') {\r\n        this.setState({loading: true})\r\n        this.loadLiteTable();\r\n      }else if (table === 'hard') {\r\n        this.setState({loading: true})\r\n        this.loadHardTable();\r\n      }\r\n    }\r\n  };\r\n\r\n  loadLiteTable() {\r\n    this.filltextService\r\n      .getLiteData()\r\n      .then((list) => {\r\n        this.setState({ list,\r\n          loading: false\r\n        });\r\n      })\r\n      .catch((err) => {this.onError(err)})\r\n  };\r\n\r\n  loadHardTable() {\r\n    this.filltextService\r\n      .getHardData()\r\n      .then((list) => {\r\n        this.setState({ list,\r\n          loading: false\r\n        });\r\n      })\r\n      .catch((err) => {this.onError(err)});\r\n    };\r\n\r\n  renderTab(arr) {\r\n    return arr.map(({id, firstName, lastName, email, phone, city}) => {\r\n      return ({\r\n\r\n        rows: [{\r\n            id: id,\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            email: email,\r\n            phone: phone,\r\n            city: city\r\n          }]\r\n\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n\r\n    const { list, loading, error } = this.state\r\n\r\n    if (loading) {return <Spinner />}\r\n    else if (error) {return <ErrorIndicator />}\r\n\r\n    const renderList = {\r\n\r\n      columns: [\r\n        {label: 'ID',field: 'id',sort: 'asc',width: 150},\r\n        {label: 'First Name',field: 'firstName',sort: 'asc',width: 270},\r\n        {label: 'Last Name',field: 'lastName',sort: 'asc',width: 200},\r\n        {label: 'Email',field: 'email',sort: 'asc',width: 100},\r\n        {label: 'Phone',field: 'phone',sort: 'asc',width: 150},\r\n        {label: 'City',field: 'city',sort: 'asc',width: 100}\r\n      ],\r\n      rows: []\r\n    };\r\n\r\n    for (let i = 1; i < list.length; i++) {\r\n      renderList.rows.push(this.renderTab(list)[i].rows[0]);\r\n    };\r\n\r\n    return (\r\n      <MDBDataTable striped responsive\r\n       small data={ renderList }/>\r\n    );\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\nimport { MDBCol, MDBContainer, MDBRow } from \"mdbreact\";\nimport Nav from './nav';\nimport DatatablePage from './datatable-page';\nimport \"./app.css\";\n\nclass App extends Component {\n\n  state = {\n    table: 'light'\n  };\n\n  onChangedHard = () => {\n    this.setState({\n      table: 'hard'\n    });\n  };\n\n  onChangedLight = () => {\n    this.setState({\n      table: 'light'\n    });\n  };\n\n  render() {\n    return (\n      <MDBContainer>\n      <Nav\n        onChangedHard={this.onChangedHard}\n        onChangedLight={this.onChangedLight}/>\n        <MDBRow center style={{ height: \"100%\" }}>\n          <MDBCol sm=\"12\" className=\"text-nowrap\">\n            <DatatablePage\n              table={ this.state.table }/>\n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App /> , document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}